// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// AUTHENTICATION & USER MANAGEMENT
// ================================

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(STAFF)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  accounts      Account[]
  sessions      Session[]
  donors        Donor[]   @relation("DonorManager")

  @@index([email])
  @@map("users")
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// ================================
// DONOR MANAGEMENT
// ================================

model Donor {
  id                    String      @id @default(cuid())
  fullName              String
  email                 String?
  phone                 String?
  address               String?
  type                  DonorType
  tier                  DonorTier   @default(NEW)
  occupation            String?
  company               String?
  position              String?
  birthday              DateTime?
  firstDonationDate     DateTime?
  personalInterests     String?
  areasOfInterest       String[]    @default([])
  notes                 String?

  // Manager relationship
  managerId             String?
  manager               User?       @relation("DonorManager", fields: [managerId], references: [id])

  // Relations
  cashDonations         DonationCash[]
  inKindDonations       DonationInKind[]
  volunteerDonations    DonationVolunteer[]
  interactions          Interaction[]
  emailLogs             EmailLog[]
  reminders             Reminder[]

  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  deletedAt             DateTime?

  @@index([email])
  @@index([phone])
  @@index([fullName])
  @@index([type])
  @@index([tier])
  @@index([managerId])
  @@map("donors")
}

enum DonorType {
  INDIVIDUAL    // Cá nhân
  COMPANY       // Doanh nghiệp
  ORGANIZATION  // Tổ chức
  COMMUNITY     // Nhóm/Cộng đồng
}

enum DonorTier {
  VIP           // VIP
  REGULAR       // Thường xuyên
  NEW           // Mới
  POTENTIAL     // Tiềm năng
}

// ================================
// DONATION MANAGEMENT
// ================================

// Tài trợ tiền mặt
model DonationCash {
  id              String              @id @default(cuid())
  donorId         String
  donor           Donor               @relation(fields: [donorId], references: [id], onDelete: Cascade)

  amount          Decimal             @db.Decimal(15, 2)
  currency        Currency            @default(VND)
  paymentMethod   PaymentMethod
  receivedDate    DateTime
  purpose         String
  receiptUrl      String?
  status          DonationStatus      @default(COMMITTED)

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime?

  @@index([donorId])
  @@index([receivedDate])
  @@index([status])
  @@map("donation_cash")
}

enum Currency {
  VND
  USD
  EUR
}

enum PaymentMethod {
  CASH            // Tiền mặt
  BANK_TRANSFER   // Chuyển khoản
  E_WALLET        // Ví điện tử
}

enum DonationStatus {
  COMMITTED       // Cam kết
  RECEIVED        // Nhận
  IN_USE          // Sử dụng
  REPORTED        // Báo cáo
}

// Tài trợ hiện vật
model DonationInKind {
  id                    String                      @id @default(cuid())
  donorId               String
  donor                 Donor                       @relation(fields: [donorId], references: [id], onDelete: Cascade)

  itemName              String
  category              InKindCategory
  quantity              Int
  unit                  String
  condition             ItemCondition               @default(NEW)
  expiryDate            DateTime?
  estimatedValue        Decimal                     @db.Decimal(15, 2)
  imageUrls             String[]                    @default([])
  receivingLocation     String
  storageLocation       String
  distributionStatus    DistributionStatus          @default(PENDING)

  createdAt             DateTime                    @default(now())
  updatedAt             DateTime                    @updatedAt
  deletedAt             DateTime?

  @@index([donorId])
  @@index([category])
  @@index([distributionStatus])
  @@map("donation_in_kind")
}

enum InKindCategory {
  MEDICAL_EQUIPMENT     // Thiết bị y tế
  MEDICINE              // Thuốc
  SUPPLIES              // Đồ dùng
  FOOD                  // Thực phẩm
  OTHER                 // Khác
}

enum ItemCondition {
  NEW                   // Mới
  USED                  // Đã qua sử dụng
}

enum DistributionStatus {
  PENDING               // Chờ nhận
  RECEIVED              // Đã nhận
  DISTRIBUTED           // Đã phân phối
}

// Công tác xã hội tình nguyện
model DonationVolunteer {
  id                    String                  @id @default(cuid())
  donorId               String
  donor                 Donor                   @relation(fields: [donorId], references: [id], onDelete: Cascade)

  workType              VolunteerWorkType
  skills                String
  startDate             DateTime
  endDate               DateTime
  hours                 Decimal                 @db.Decimal(10, 2)
  hourlyRate            Decimal                 @db.Decimal(10, 2)  // Giá trị quy đổi/giờ
  totalValue            Decimal                 @db.Decimal(15, 2)  // Tổng giá trị quy đổi
  rating                Int?                                        // 1-5 stars
  reviewNotes           String?

  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  deletedAt             DateTime?

  @@index([donorId])
  @@index([workType])
  @@index([startDate])
  @@map("donation_volunteer")
}

enum VolunteerWorkType {
  MEDICAL               // Y tế
  ADMINISTRATIVE        // Hành chính
  TRANSPORTATION        // Vận chuyển
  CARE                  // Chăm sóc
  OTHER                 // Khác
}

// ================================
// INTERACTION MANAGEMENT
// ================================

model Interaction {
  id              String              @id @default(cuid())
  donorId         String
  donor           Donor               @relation(fields: [donorId], references: [id], onDelete: Cascade)

  type            InteractionType
  date            DateTime
  content         String

  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  deletedAt       DateTime?

  @@index([donorId])
  @@index([date])
  @@index([type])
  @@map("interactions")
}

enum InteractionType {
  CALL                  // Cuộc gọi
  EMAIL                 // Email
  MEETING               // Gặp mặt
  EVENT                 // Sự kiện
}

// ================================
// GRATITUDE MODULE
// ================================

model EmailLog {
  id              String          @id @default(cuid())
  donorId         String
  donor           Donor           @relation(fields: [donorId], references: [id], onDelete: Cascade)

  templateId      String?
  template        EmailTemplate?  @relation(fields: [templateId], references: [id], onDelete: SetNull)

  subject         String
  body            String
  sentAt          DateTime        @default(now())
  status          EmailStatus     @default(PENDING)
  errorMessage    String?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  @@index([donorId])
  @@index([templateId])
  @@index([sentAt])
  @@map("email_logs")
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

model EmailTemplate {
  id              String          @id @default(cuid())
  name            String
  subject         String
  body            String
  type            TemplateType    @default(OTHER)

  emailLogs       EmailLog[]

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?

  @@index([type])
  @@map("email_templates")
}

enum TemplateType {
  THANK_YOU         // Cảm ơn
  BIRTHDAY          // Sinh nhật
  REPORT            // Báo cáo
  OTHER             // Khác
}

model Reminder {
  id              String          @id @default(cuid())
  donorId         String
  donor           Donor           @relation(fields: [donorId], references: [id], onDelete: Cascade)

  type            ReminderType
  dueDate         DateTime
  title           String
  description     String?
  isCompleted     Boolean         @default(false)
  completedAt     DateTime?

  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?

  @@index([donorId])
  @@index([dueDate])
  @@index([isCompleted])
  @@index([type])
  @@map("reminders")
}

enum ReminderType {
  BIRTHDAY              // Sinh nhật
  DONATION_ANNIVERSARY  // Kỷ niệm tài trợ
  SEND_REPORT           // Gửi báo cáo
  FOLLOW_UP             // Theo dõi
  OTHER                 // Khác
}
